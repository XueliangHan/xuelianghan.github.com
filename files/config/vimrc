"Xueliang (Albert) Han's vim configuration fils"

"Han's costom command"
"From 7 habit text editing"
:set hlsearch

"双引号开始的行为注释行，下同 

"去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 
set nocompatible 

"显示行号 
set nu
set number 

"检测文件的类型 
filetype on 

"记录历史的行数 
set history=1000 

"背景使用黑色 
"set background=dark

colo koehler
"colo default

"语法高亮度显示 
syntax on 



"下面两行在进行编写代码时，在格式对起上很有用； 

"第一行，vim使用自动对起，也就是把当前行的对起格式应用到下一行； 

"第二行，依据上面的对起格式，智能的选择对起方式，对于类似C语言编 

"写上很有用 

set autoindent 
set smartindent "automatically execute indent at the new line"

"第一行设置tab键为4个空格，第二行设置当行之间交错时使用4个空格 
set tabstop=4 
set shiftwidth=4 

set expandtab "enter space when tab is pressed"
set softtabstop=4

"设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号 
set showmatch 

"去除vim的GUI版本中的toolbar 
set guioptions-=T 

"当vim进行编辑时，如果命令错误，会发出一个响声，该设置去掉响声 
set vb t_vb= 

"在编辑过程中，在右下角显示光标位置的状态行 
set ruler 

"默认情况下，寻找匹配是高亮度显示的，该设置关闭高亮显示 

"set nohls 

"查询时非常方便，如要查找book单词，当输入到/b时，会自动找到第一 

"个b开头的单词，当输入到/bo时，会自动找到第一个bo开头的单词，依 

"次类推，进行查找时，使用此设置会快速找到答案，当你找要匹配的单词 

"时，别忘记回车 

set incsearch 

"修改一个文件后，自动进行备份，备份的文件名为原文件名加"~“后缀 

"if has("vms") 

"set nobackup 

"else 

"set backup 

"endif 

"显示中文不乱码
set fileencodings=utf-8,gb2312,gbk,gb18030

set termencoding=utf-8

set fileformats=unix

"set encoding=prc
set encoding=utf-8

"Mac OS X @ 2013-04-08: solve the problem of unable to delete 'enter symbol' by using 'backspace' or 'delete'.
set backspace=indent,eol,start

""""""""""""""""""""""""""""""
" Tag list (ctags)
""""""""""""""""""""""""""""""
    map <F3> :silent! Tlist<CR>             "按f3自动切换
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
    let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
    let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
    let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口 
    let Tlist_Auto_Open=0                     "自动开启
    let Tlist_Process_File_Always=1        "一直更新tags

"Toggle Menu and Toolbar
set guioptions-=m
set guioptions-=T
map <silent> <F2> :if &guioptions =~# 'T' <Bar>
      \set guioptions-=T <Bar>
      \set guioptions-=m <bar>
    \else <Bar>
      \set guioptions+=T <Bar>
      \set guioptions+=m <Bar>
    \endif<CR>

func! CompileGcc()
    exec "w"
    let compilecmd="!gcc "
    let compileflag="-o %<.out 2> .%<.err"
    exec compilecmd." % ".compileflag
    exec "cfile .%<.err"
endfunc
func! CompileGpp()
    exec "w"
    let compilecmd="!g++ "
    let compileflag="-o %<.out 2> .%<.err"
    exec compilecmd." % ".compileflag
    exec "cfile .%<.err"
endfunc
func! RunPython()
    exec "w"
    exec "!python %"
endfunc
func! RunPython2()
    exec "w"
    exec "!python2 %"
endfunc
func! CompileJava()
    exec "w"
    exec "!javac %"
endfunc
func! CompileTex()
    exec "w"
    exec "!pdflatex %"
endfunc
func! CompileCode()
    exec "w"
    if &filetype == "cpp"
        exec "call CompileGpp()"
    elseif &filetype == "cc"
        exec "call CompileGpp()"
    elseif &filetype == "c"
        exec "call CompileGcc()"
    elseif &filetype == "python"
        exec "call RunPython2()"
    elseif &filetype == "java"
        exec "call CompileJava()"
    elseif &filetype == "tex"
        exec "call CompileTex()"
    endif
endfunc
func! RunResult()
    exec "w"
    if &filetype == "cpp"
        exec "! ./%<.out"
    elseif &filetype == "cc"
        exec "! ./%<.out"
    elseif &filetype == "c"
        exec "! ./%<.out"
    elseif &filetype == "python"
        exec "call RunPython()"
    elseif &filetype == "java"
        exec "!java %<"
    elseif &filetype == "tex"
        exec "!evince %<.pdf"
    endif
endfunc
func! RunResultWithTest()
    exec "w"
    if &filetype == "cpp"
        exec "! ./%<.out < %<.test"
    elseif &filetype == "cc"
        exec "! ./%<.out < %<.test"
    elseif &filetype == "c"
        exec "! ./%<.out < %<.test"
    elseif &filetype == "python"
        exec "call RunPython()"
    elseif &filetype == "java"
        exec "!java %< < %<.test"
    endif
endfunc
"CTRL+c compile the code"
map <C-c> :call CompileCode()<CR>
imap <C-c> <ESC>:call CompileCode()<CR>
vmap <C-c> <ESC>:call CompileCode()<CR>
"CTRL+r run the program"
map <C-r> :call RunResult()<CR>
"CTRL+t run the program with test data, test date name must be same with program name, filename extension is .test
map <C-t> :call RunResultWithTest()<CR>

"for supertab

let g:SuperTabRetainCompletionType=2
"let g:SuperTabDefaultCompletionType="<C-X><C-O>""

"new thought @ 2013-04-08: build section by 'OS' and ''
